package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.com/irdaislakhuafa/octacat-app-backend/src/handler/gql/generated/model"
	"github.com/irdaislakhuafa/octacat-app-backend/src/handler/gql/generated/server"
	"github.com/irdaislakhuafa/octacat-app-backend/src/handler/gql/generated/transform"
)

// Register is the resolver for the register field.
func (r *authMutationResolver) Register(ctx context.Context, obj *model.AuthMutation, param model.RegisterParam) (*model.User, error) {
	params, err := transform.FromRegisterParams(param)
	if err != nil {
		return nil, err
	}

	result, err := r.Usecase.User.Register(ctx, params)
	if err != nil {
		return nil, err
	}

	response, err := transform.ToUserModel(result)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

// Login is the resolver for the login field.
func (r *authMutationResolver) Login(ctx context.Context, obj *model.AuthMutation, param model.LoginParam) (*model.JWTResponse, error) {
	params, err := transform.FromLoginParam(param)
	if err != nil {
		return nil, err
	}

	result, err := r.Usecase.User.Login(ctx, params)
	if err != nil {
		return nil, err
	}

	response, err := transform.ToJWTResponseModel(result)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

// AuthMutation returns server.AuthMutationResolver implementation.
func (r *Resolver) AuthMutation() server.AuthMutationResolver { return &authMutationResolver{r} }

type authMutationResolver struct{ *Resolver }
