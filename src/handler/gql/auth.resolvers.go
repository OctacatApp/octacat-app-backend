package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.com/irdaislakhuafa/octacat-app-backend/src/business/generated/psql"
	"github.com/irdaislakhuafa/octacat-app-backend/src/handler/gql/generated/model"
	"github.com/irdaislakhuafa/octacat-app-backend/src/handler/gql/generated/server"
)

// Register is the resolver for the register field.
func (r *authMutationResolver) Register(ctx context.Context, obj *model.AuthMutation, param model.RegisterParam) (*model.User, error) {
	// TODO: create convertion code
	result, err := r.Usecase.User.Register(ctx, psql.CreateUserParams{Name: param.Name, Email: param.Email, Password: param.Password})
	if err != nil {
		return nil, err
	}

	response := model.User{
		ID:           result.ID,
		Name:         result.Name,
		Email:        result.Email,
		Password:     result.Password,
		ProfileImage: result.ProfileImage,
		CreatedAt:    result.CreatedAt.Format("02/01/2006 15:04:05"),
		CreatedBy:    result.CreatedBy,
		UpdatedAt:    result.UpdatedAt.Time.Format("02/01/2006 15:04:05"),
		UpdatedBy:    result.UpdatedBy.String,
		DeletedAt:    result.DeletedAt.Time.Format("02/01/2006 15:04:05"),
		DeletedBy:    result.DeletedBy.String,
		IsDeleted:    result.IsDeleted,
	}

	return &response, nil
}

// AuthMutation returns server.AuthMutationResolver implementation.
func (r *Resolver) AuthMutation() server.AuthMutationResolver { return &authMutationResolver{r} }

type authMutationResolver struct{ *Resolver }
